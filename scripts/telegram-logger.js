const https = require('https');

class TelegramLogger {
  constructor(botToken, chatId) {
    this.botToken = botToken;
    this.chatId = chatId;
  }

  async sendMessage(text) {
    if (!this.botToken || !this.chatId) {
      console.log('Telegram logger not configured');
      return null;
    }

    const payload = {
      chat_id: this.chatId,
      text: text,
      parse_mode: 'Markdown'
    };

    try {
      const response = await this.makeRequest('sendMessage', payload);
      return response;
    } catch (error) {
      console.error('Telegram logger error:', error.message);
      return null;
    }
  }

  async sendError(title, error, context = '') {
    let message = 'üö® *' + title + '*\n\n';

    if (context) {
      message += '*–ö–æ–Ω—Ç–µ–∫—Å—Ç:* ' + context + '\n';
    }

    message += '*–û—à–∏–±–∫–∞:* `' + error + '`\n';

    return this.sendMessage(message);
  }

  async sendSuccess(title, details = '', stats = {}) {
    let message = '‚úÖ *' + title + '*\n\n';

    if (details) {
      message += details + '\n\n';
    }

    if (Object.keys(stats).length > 0) {
      message += '*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n';
      const statsLines = Object.entries(stats).map(([key, value]) => '‚Ä¢ ' + key + ': ' + value);
      message += statsLines.join('\n') + '\n\n';
    }

    return this.sendMessage(message);
  }

  async makeRequest(method, payload) {
    return new Promise((resolve, reject) => {
      const data = JSON.stringify(payload);
      const options = {
        hostname: 'api.telegram.org',
        path: `/bot${this.botToken}/${method}`,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(data)
        }
      };

      const req = https.request(options, (res) => {
        let responseData = '';
        res.on('data', (chunk) => {
          responseData += chunk;
        });
        res.on('end', () => {
          try {
            const parsedData = JSON.parse(responseData);
            if (parsedData.ok) {
              resolve(parsedData);
            } else {
              reject(new Error(parsedData.description || 'Unknown error'));
            }
          } catch (error) {
            reject(error);
          }
        });
      });

      req.on('error', (error) => {
        reject(error);
      });

      req.write(data);
      req.end();
    });
  }

  // Convenience methods for specific logging scenarios
  async logParsingStart() {
    return this.sendSuccess('üöÄ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤', '–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π');
  }

  async logParsingResult(messageCount) {
    return this.sendSuccess('üì° –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω', '–°–æ–±—Ä–∞–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–Ω–∞–ª–æ–≤', {
      '–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π': messageCount
    });
  }

  async logProcessingComplete() {
    return this.sendSuccess('ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', '–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —á–µ—Ä–µ–∑ AI –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
  }

  async logSuccess(duration, listingsCount = 0) {
    const stats = {
      '–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': duration + ' —Å–µ–∫',
      '–°–æ–∑–¥–∞–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π': listingsCount,
      '–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫': '—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç'
    };

    return this.sendSuccess('‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω', '–ü–∞—Ä—Å–∏–Ω–≥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ', stats);
  }

  async logError(error) {
    return this.sendError('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞', error);
  }
}

module.exports = TelegramLogger;