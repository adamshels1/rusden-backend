require('dotenv').config();
const MTProto = require('@mtproto/core');
const path = require('path');

const api_id = parseInt(process.env.API_ID);
const api_hash = process.env.API_HASH;

const mtproto = new MTProto({
  api_id,
  api_hash,
  storageOptions: {
    path: path.resolve(__dirname, './data.json'),
  },
  customLocalStorage: {},
});

const phone = '+905525974578';
const code = '42587'; // –ö–û–î –ò–ó TELEGRAM

async function sendCode(phone) {
  try {
    const { phone_code_hash } = await mtproto.call('auth.sendCode', {
      phone_number: phone,
      settings: {
        _: 'codeSettings',
      },
    });
    return phone_code_hash;
  } catch (error) {
    if (error.error_message && error.error_message.includes('PHONE_MIGRATE_')) {
      const [, dc] = error.error_message.match(/PHONE_MIGRATE_(\d+)/);
      await mtproto.setDefaultDc(+dc);
      return sendCode(phone);
    }
    throw error;
  }
}

async function signIn({ code, phone, phone_code_hash }) {
  try {
    const signInResult = await mtproto.call('auth.signIn', {
      phone_code: code,
      phone_number: phone,
      phone_code_hash: phone_code_hash,
    });
    return signInResult;
  } catch (error) {
    if (error.error_message === 'SESSION_PASSWORD_NEEDED') {
      console.error('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Å–∫—Ä–∏–ø—Ç.');
      throw error;
    }
    throw error;
  }
}

(async () => {
  console.log('\n=== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –∫–æ–¥–æ–º ===\n');

  console.log(`üì± –í—Ö–æ–¥ —Å –Ω–æ–º–µ—Ä–æ–º: ${phone}`);
  console.log(`üî¢ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥: ${code}\n`);

  const phone_code_hash = await sendCode(phone);

  const result = await signIn({
    code,
    phone,
    phone_code_hash,
  });

  console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
  console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${result.user.first_name}`);
  console.log('\nüìù –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ data.json');
  console.log('\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å: node simple-parser.js\n');
})().catch(error => {
  console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.error_message || error.message);

  if (error.error_message === 'PHONE_CODE_EXPIRED') {
    console.log('\n‚ö†Ô∏è  –ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª! –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é code –≤ —Å–∫—Ä–∏–ø—Ç–µ.\n');
  }
});
