require('dotenv').config();
const fs = require('fs');
const path = require('path');
const { createClient } = require('@supabase/supabase-js');
const Groq = require('groq-sdk').default;

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });

const SYSTEM_PROMPT = `–¢—ã ‚Äî AI-–∞–≥–µ–Ω—Ç –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏–∑ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö Telegram-–∫–∞–Ω–∞–ª–æ–≤ –≤ –¢—É—Ä—Ü–∏–∏.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

**–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:**
- realty: –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å (–∞—Ä–µ–Ω–¥–∞, –ø—Ä–æ–¥–∞–∂–∞, –∫—É–ø–ª—é)
- job: –≤–∞–∫–∞–Ω—Å–∏–∏, —Ä–µ–∑—é–º–µ, –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã
- service: —É—Å–ª—É–≥–∏ (—Ä–µ–º–æ–Ω—Ç, —É–±–æ—Ä–∫–∞, —Ç–∞–∫—Å–∏, –¥–æ—Å—Ç–∞–≤–∫–∞ –∏ —Ç.–¥.)
- goods: –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–º–µ–±–µ–ª—å, —Ç–µ—Ö–Ω–∏–∫–∞, –æ–¥–µ–∂–¥–∞ –∏ —Ç.–¥.)
- event: –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –≤—Å—Ç—Ä–µ—á–∏, –∞–Ω–æ–Ω—Å—ã

**–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:**
{
  "category": "realty" | "job" | "service" | "goods" | "event" | "other",
  "subcategory": "–Ω–∞–ø—Ä–∏–º–µ—Ä: –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞, –≤–∞–∫–∞–Ω—Å–∏—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞, –∏ —Ç.–¥.",
  "title": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)",
  "description": "–ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
  "price": {
    "amount": —á–∏—Å–ª–æ –∏–ª–∏ null,
    "currency": "EUR" | "USD" | "TRY" | null,
    "period": "month" | "day" | "once" | null
  },
  "location": {
    "city": "Alanya, Antalya, Istanbul –∏ —Ç.–¥. –∏–ª–∏ null",
    "district": "—Ä–∞–π–æ–Ω –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ null"
  },
  "contact": {
    "phone": "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ null",
    "telegram": "—é–∑–µ—Ä–Ω–µ–π–º —Ç–µ–ª–µ–≥—Ä–∞–º –∏–ª–∏ null",
    "other": "–¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–ª–∏ null"
  },
  "realty": {
    "rooms": "1+1, 2+1, studio –∏ —Ç.–¥. –∏–ª–∏ null",
    "area_sqm": —á–∏—Å–ª–æ –∏–ª–∏ null,
    "floor": —á–∏—Å–ª–æ –∏–ª–∏ null,
    "distance_to_sea": —á–∏—Å–ª–æ –≤ –º–µ—Ç—Ä–∞—Ö –∏–ª–∏ null
  },
  "language": "ru" | "en" | "tr",
  "is_spam": true | false,
  "confidence": 0.0-1.0
}`;

async function categorizeMessage(text) {
  const userPrompt = `–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n${text}`;

  const completion = await groq.chat.completions.create({
    model: 'llama-3.3-70b-versatile',
    messages: [
      { role: 'system', content: SYSTEM_PROMPT },
      { role: 'user', content: userPrompt },
    ],
    temperature: 0.3,
    response_format: { type: 'json_object' },
  });

  return JSON.parse(completion.choices[0].message.content);
}

async function processMessages() {
  console.log('üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n');

  // –ß–∏—Ç–∞–µ–º —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const parsedPath = path.resolve(__dirname, '../telegram-parser/parsed_messages.json');
  const messages = JSON.parse(fs.readFileSync(parsedPath, 'utf8'));

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π\n`);

  // –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ alanyadom (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –æ–Ω)
  const { data: channel } = await supabase
    .from('channels')
    .select('id')
    .eq('username', 'alanyadom')
    .single();

  if (!channel) {
    console.error('‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  let processed = 0;
  let skipped = 0;

  for (const msg of messages) {
    console.log(`\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`);
    console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ ${msg.id}`);
    console.log(`üìÑ –¢–µ–∫—Å—Ç: ${msg.text.substring(0, 100)}...`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏ —É–∂–µ
    const { data: existing } = await supabase
      .from('raw_messages')
      .select('id')
      .eq('channel_id', channel.id)
      .eq('telegram_message_id', msg.id)
      .single();

    if (existing) {
      console.log('‚è≠Ô∏è  –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      skipped++;
      continue;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º raw_message
    const { data: rawMessage, error: rawError } = await supabase
      .from('raw_messages')
      .insert({
        channel_id: channel.id,
        telegram_message_id: msg.id,
        raw_text: msg.text,
        author_info: {
          id: msg.author.id,
          username: msg.author.username,
          firstName: msg.author.firstName,
          lastName: msg.author.lastName,
          phone: msg.author.phone,
        },
        media_urls: msg.images,
        message_date: msg.date,
      })
      .select()
      .single();

    if (rawError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è raw_message:', rawError);
      continue;
    }

    console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ raw_messages');

    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ AI
    try {
      console.log('ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ AI...');
      const aiResult = await categorizeMessage(msg.text);

      // –°–æ–∑–¥–∞–µ–º listing (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
      const location = aiResult.location?.city
        ? `${aiResult.location.city}${aiResult.location.district ? ', ' + aiResult.location.district : ''}`
        : null;

      const { data: listing, error: listingError } = await supabase
        .from('listings')
        .insert({
          raw_message_id: rawMessage.id,
          category: aiResult.category,
          title: aiResult.title,
          description: aiResult.description,
          price: aiResult.price?.amount,
          currency: aiResult.price?.currency,
          location: location,
          contact_info: {
            phone: aiResult.contact?.phone,
            telegram: aiResult.contact?.telegram,
            other: aiResult.contact?.other,
          },
          images: msg.images || [],
          posted_date: msg.date,
          ai_confidence: aiResult.confidence,
        })
        .select()
        .single();

      if (listingError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è listing:', listingError);
        continue;
      }

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω listing: ${aiResult.category} (${Math.round(aiResult.confidence * 100)}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)`);
      console.log(`   –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${aiResult.title}`);
      processed++;

    } catch (aiError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ AI:', aiError.message);
    }
  }

  console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
  console.log(`\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!`);
  console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed}`);
  console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`);
}

processMessages().catch(console.error);
