import { supabase } from '../config/supabase';
import { AIService } from './aiService';
import { RawMessage } from '../types';

export class ListingService {
  private aiService = new AIService();

  async processRawMessage(rawMessageId: string): Promise<void> {
    // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const { data: rawMessage, error: fetchError } = await supabase
      .from('raw_messages')
      .select('*')
      .eq('id', rawMessageId)
      .single();

    if (fetchError || !rawMessage) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ${rawMessageId}:`, fetchError);
      return;
    }

    try {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI
      const aiResult = await this.aiService.categorizeMessage(rawMessage.raw_text);
      const correctedResult = this.applyCategoryHeuristics(rawMessage.raw_text, aiResult);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ listing
      await this.saveListing(rawMessageId, correctedResult, 'completed');

      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ${rawMessageId} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${correctedResult.category})`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ AI –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${rawMessageId}:`, error);
      await this.saveListing(rawMessageId, {}, 'failed');
    }
  }

  async processPendingMessages(limit = 10): Promise<void> {
    // –ü–æ–ª—É—á–∞–µ–º ID —Å—ã—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    const { data: processedIds } = await supabase
      .from('listings')
      .select('raw_message_id');

    const processedIdsSet = new Set(processedIds?.map(l => l.raw_message_id) || []);

    const { data: rawMessages, error } = await supabase
      .from('raw_messages')
      .select('*')
      .order('posted_at', { ascending: false })
      .limit(limit * 2); // –ë–µ—Ä–µ–º —Å –∑–∞–ø–∞—Å–æ–º

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      return;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
    const unprocessed = rawMessages?.filter(m => !processedIdsSet.has(m.id)).slice(0, limit) || [];

    if (unprocessed.length === 0) {
      console.log('‚ÑπÔ∏è  –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏');
      return;
    }

    console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${unprocessed.length} —Å–æ–æ–±—â–µ–Ω–∏–π...`);

    for (const rawMessage of unprocessed) {
      await this.processMessage(rawMessage);
    }
  }

  private async processMessage(rawMessage: RawMessage): Promise<void> {
    console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ${rawMessage.telegram_message_id}...`);

    try {
      // AI –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
      const aiResult = await this.aiService.categorizeMessageWithRetry(rawMessage.raw_text);
      const correctedResult = this.applyCategoryHeuristics(rawMessage.raw_text, aiResult);

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ø–∞–º
      if (correctedResult.is_spam) {
        console.log('üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —Å–ø–∞–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        await this.saveListing(rawMessage.id, correctedResult, 'completed');
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ listings
      await this.saveListing(rawMessage.id, correctedResult, 'completed');
      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${correctedResult.category})`);

    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${rawMessage.telegram_message_id}:`, error.message);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ—à–∏–±–∫–æ–π
      await supabase.from('listings').insert({
        raw_message_id: rawMessage.id,
        category: 'event',
        ai_processing_status: 'failed',
        ai_error_message: error.message,
      });
    }
  }

  private async saveListing(
    rawMessageId: string,
    aiResult: any,
    status: 'completed' | 'failed'
  ): Promise<void> {
    const { error } = await supabase.from('listings').insert({
      raw_message_id: rawMessageId,
      category: aiResult.category || 'goods',
      subcategory: aiResult.subcategory,
      title: aiResult.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      description: aiResult.description || '',
      price: aiResult.price_amount,
      currency: aiResult.price_currency,
      location: aiResult.city || aiResult.district,
      contact_info: {
        phone: aiResult.contact_phone,
        telegram: aiResult.contact_telegram,
      },
      posted_date: new Date().toISOString(),
      ai_confidence: aiResult.confidence || 0.5,
      ai_processing_status: status,
    });

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ listings:', error);
      throw error;
    }
  }

  private applyCategoryHeuristics(rawText: string, aiResult: any) {
    const result = { ...aiResult };
    const text = (rawText || '').toLowerCase();

    if (!result.description && rawText) {
      result.description = rawText.trim();
    }

    const realtyPatterns = [
      /\b–∫–≤–∞—Ä—Ç–∏—Ä/i,
      /\b–∞–ø–∞—Ä—Ç/i,
      /\b—Å—Ç—É–¥–∏—è/i,
      /\b–∂–∫\b/i,
      /\b–∂–∏–ª–æ–π\s+–∫–æ–º–ø–ª–µ–∫—Å/i,
      /\b–∂–∏–ª–∫–æ–º–ø–ª–µ–∫—Å/i,
      /\b–¥–æ–º\b/i,
      /\b–≤–∏–ª–ª–∞/i,
      /\b–¥—É–ø–ª–µ–∫—Å/i,
      /\b–ø–µ–Ω—Ç—Ö–∞—É—Å/i,
      /residen[ct]/i,
    ];
    const autoPatterns = [
      /\b–∞–≤—Ç–æ/i,
      /\b–º–∞—à–∏–Ω/i,
      /\bcar\b/i,
      /\b–∞–≤—Ç–æ–º–æ–±/i,
      /rent\s*a\s*car/i,
      /\b—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç/i,
    ];

    const hasPlanNotation = /\b\d+\s*\+\s*\d\b/.test(text);
    const hasRealtyKeyword = realtyPatterns.some(pattern => pattern.test(text));
    const hasAutoKeyword = autoPatterns.some(pattern => pattern.test(text));

    if ((hasRealtyKeyword || hasPlanNotation) && result.category !== 'realty') {
      result.category = 'realty';
    }

    if (result.category === 'auto' && !hasAutoKeyword && (hasRealtyKeyword || hasPlanNotation)) {
      result.category = 'realty';
    }

    if (result.category === 'realty') {
      const salePatterns = [/–ø—Ä–æ–¥–∞–º/i, /–ø—Ä–æ–¥–∞—é/i, /–ø—Ä–æ–¥–∞–∂/i, /–ø—Ä–æ–¥–∞–µ—Ç—Å—è/i];
      const rentShortPatterns = [/–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á/i, /–ø–æ—Å—É—Ç/i, /—Å—É—Ç–∫/i, /daily/i, /–Ω–∞\s+–Ω–µ–¥–µ–ª/i, /–Ω–∞\s+–Ω–æ—á/i];
      const rentLongPatterns = [/–¥–æ–ª–≥–æ—Å—Ä–æ—á/i, /–¥–æ–ª–≥–æ—Å—Ä–æ–∫/i, /–Ω–∞\s+–≥–æ–¥/i, /12\s*–º–µ—Å/i, /12\s*–º–µ—Å—è—Ü/i];
      const rentWord = /–∞—Ä–µ–Ω–¥|—Å–¥–∞–º|—Å–¥–∞—é/i.test(text);

      const currentSubcategory = typeof result.subcategory === 'string' ? result.subcategory.toLowerCase() : '';

      if (!currentSubcategory || currentSubcategory.includes('–∞–≤—Ç–æ')) {
        if (salePatterns.some(pattern => pattern.test(text))) {
          result.subcategory = '–ü—Ä–æ–¥–∞–∂–∞';
        } else if (rentShortPatterns.some(pattern => pattern.test(text))) {
          result.subcategory = '–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –∞—Ä–µ–Ω–¥–∞';
        } else if (rentLongPatterns.some(pattern => pattern.test(text)) || rentWord) {
          result.subcategory = '–ê—Ä–µ–Ω–¥–∞';
        }
      }

      if (!result.price_currency) {
        if (/eur|‚Ç¨|–µ–≤—Ä–æ/i.test(text)) {
          result.price_currency = 'EUR';
        } else if (/usd|\$|–¥–æ–ª–ª–∞—Ä/i.test(text)) {
          result.price_currency = 'USD';
        } else if (/try|‚Ç∫|–ª–∏—Ä|lira/i.test(text)) {
          result.price_currency = 'TRY';
        }
      }
    }

    return result;
  }

  async getListings(filters: {
    category?: string;
    subcategory?: string;
    city?: string;
    search?: string;
    minPrice?: number;
    maxPrice?: number;
    limit?: number;
    offset?: number;
  }) {
    let query = supabase
      .from('listings')
      .select('*', { count: 'exact' })
      .eq('is_active', true)
      .order('posted_date', { ascending: false });

    if (filters.category) {
      query = query.eq('category', filters.category);
    }

    if (filters.subcategory) {
      query = query.eq('subcategory', filters.subcategory);
    }

    if (filters.city) {
      query = query.ilike('location', `%${filters.city}%`);
    }

    if (filters.search) {
      query = query.or(`title.ilike.%${filters.search}%,description.ilike.%${filters.search}%`);
    }

    if (filters.minPrice) {
      query = query.gte('price', filters.minPrice);
    }

    if (filters.maxPrice) {
      query = query.lte('price', filters.maxPrice);
    }

    const { data, error, count } = await query
      .limit(filters.limit || 20)
      .range(filters.offset || 0, (filters.offset || 0) + (filters.limit || 20) - 1);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è listings:', error);
      throw error;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–æ–ª–Ω—ã–µ URL Supabase Storage (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–ª–Ω—ã–π URL)
    const listingsWithImages = data?.map(listing => {
      if (listing.images && Array.isArray(listing.images)) {
        listing.images = listing.images.map((imageUrl: string) => {
          // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –ø–æ–ª–Ω—ã–π URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
          if (imageUrl.startsWith('http')) {
            return imageUrl;
          }
          // –ï—Å–ª–∏ —ç—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
          const { data } = supabase.storage
            .from('listings-images')
            .getPublicUrl(imageUrl);
          return data.publicUrl;
        });
      }
      return listing;
    });

    return { data: listingsWithImages, count };
  }
}

export const listingService = new ListingService();
