import Groq from 'groq-sdk';
import { env } from '../config/env';

const groq = new Groq({ apiKey: env.GROQ_API_KEY });

const MODERATION_PROMPT = `–¢—ã ‚Äî AI-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞:
1. –°–ø–∞–º –∏ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (–±–∞—Ä—ã, –∫–ª—É–±—ã, —Å—Ç—Ä–∏–ø—Ç–∏–∑, –Ω–æ—á–Ω—ã–µ –∫–ª—É–±—ã, –º–∞—Å—Å–∞–∂, —ç—Å–∫–æ—Ä—Ç, –∏–Ω—Ç–∏–º, —Ö–æ—Å—Ç–µ—Å, —Ç–∞–Ω—Ü–æ–≤—â–∏—Ü—ã)
2. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
3. –ê–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

**–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:**
- realty: –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å (–∫–≤–∞—Ä—Ç–∏—Ä—ã, –¥–æ–º–∞, –≤–∏–ª–ª—ã, —Å—Ç—É–¥–∏–∏, –∫–æ–º–Ω–∞—Ç—ã)
- job: –≤–∞–∫–∞–Ω—Å–∏–∏ (—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –∏—â–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)
- service: —É—Å–ª—É–≥–∏ (—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É—Å–ª—É–≥–∏)
- goods: —Ç–æ–≤–∞—Ä—ã (–º–µ–±–µ–ª—å, —Ç–µ—Ö–Ω–∏–∫–∞, –æ–¥–µ–∂–¥–∞)
- auto: –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç

**–í–ê–ñ–ù–û:**
- –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–ø–∞–º–∞/–Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ - –û–¢–ö–õ–û–ù–ò–¢–¨
- –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤—ã–≥–ª—è–¥—è—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ - –û–¢–ö–õ–û–ù–ò–¢–¨
- –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ (—Å–ª—É—á–∞–π–Ω—ã–π –Ω–∞–±–æ—Ä –±—É–∫–≤) - –û–¢–ö–õ–û–ù–ò–¢–¨
- –ù–ï –ø—Ä–æ–≤–µ—Ä—è–π –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è - —ç—Ç–æ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "approved": true | false,
  "reason": "–ø—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –µ—Å–ª–∏ approved=false, –∏–Ω–∞—á–µ null",
  "category": "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
  "subcategory": "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",
  "confidence": 0.0-1.0
}`;

interface ModerationInput {
  title: string;
  description: string;
  category: string;
  subcategory?: string;
  phone?: string;
  telegram?: string;
  location?: string;
}

interface ModerationResult {
  approved: boolean;
  reason: string | null;
  category: string;
  subcategory?: string;
  confidence: number;
}

export class AIModerationService {
  async moderateListing(input: ModerationInput): Promise<ModerationResult> {
    const userPrompt = `
–ü—Ä–æ–≤–µ—Ä—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:

–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${input.title}
–û–ø–∏—Å–∞–Ω–∏–µ: ${input.description}
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${input.category}
${input.subcategory ? `–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${input.subcategory}` : ''}
${input.location ? `–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${input.location}` : ''}

–ö–æ–Ω—Ç–∞–∫—Ç—ã:
${input.phone ? `–¢–µ–ª–µ—Ñ–æ–Ω: ${input.phone}` : ''}
${input.telegram ? `Telegram: ${input.telegram}` : ''}
${!input.phone && !input.telegram ? '–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç' : ''}
`;

    const completion = await groq.chat.completions.create({
      model: 'llama-3.1-8b-instant',
      messages: [
        { role: 'system', content: MODERATION_PROMPT },
        { role: 'user', content: userPrompt },
      ],
      temperature: 0.2,
      response_format: { type: 'json_object' },
    });

    const result = JSON.parse(completion.choices[0].message.content || '{}');

    return {
      approved: result.approved,
      reason: result.reason,
      category: result.category,
      subcategory: result.subcategory,
      confidence: result.confidence,
    };
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫–æ–¥–∞
  validateBasicRules(input: ModerationInput): { valid: boolean; reason?: string } {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    if (!input.phone && !input.telegram) {
      return { valid: false, reason: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram)' };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è (—É–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –Ω–æ –Ω–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫)
    const cleanDescription = input.description?.replace(/\s+/g, ' ').trim() || '';
    console.log('üìù Description validation:');
    console.log('  Original:', input.description);
    console.log('  Clean:', cleanDescription);
    console.log('  Length:', cleanDescription.length);

    if (cleanDescription.length < 10) {
      return { valid: false, reason: '–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)' };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const cleanTitle = input.title?.trim() || '';
    if (cleanTitle.length < 5) {
      return { valid: false, reason: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)' };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    const spamKeywords = /–±–∞—Ä|–∫–ª—É–±|—Å—Ç—Ä–∏–ø|–Ω–æ—á–Ω–æ–π|–º–∞—Å—Å–∞–∂|—ç—Å–∫–æ—Ä—Ç|–∏–Ω—Ç–∏–º|–¥–µ–≤—É—à–∫[–∏–∞]\s+–¥–ª—è|—Ö–æ—Å—Ç–µ—Å|—Ç–∞–Ω—Ü–æ–≤—â–∏—Ü/i;
    const textToCheck = `${input.title} ${input.description}`;

    if (spamKeywords.test(textToCheck)) {
      return { valid: false, reason: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç' };
    }

    return { valid: true };
  }
}
