// –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏–∑ Supabase Storage
require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');
const https = require('https');

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
);

async function downloadImage(url, filepath) {
  return new Promise((resolve, reject) => {
    https.get(url, (response) => {
      const file = fs.createWriteStream(filepath);
      response.pipe(file);
      file.on('finish', () => {
        file.close();
        resolve();
      });
    }).on('error', reject);
  });
}

async function migrateStorage() {
  console.log('üì¶ –≠–∫—Å–ø–æ—Ä—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏–∑ Supabase Storage...');

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
  const { data: files, error } = await supabase
    .storage
    .from('listings-images')
    .list();

  if (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    return;
  }

  const exportDir = './exported-images';
  if (!fs.existsSync(exportDir)) {
    fs.mkdirSync(exportDir);
  }

  console.log(`–ù–∞–π–¥–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤`);

  for (const file of files) {
    const { data } = supabase
      .storage
      .from('listings-images')
      .getPublicUrl(file.name);

    const filepath = path.join(exportDir, file.name);

    console.log(`‚¨áÔ∏è  ${file.name}`);
    await downloadImage(data.publicUrl, filepath);
  }

  console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
  console.log(`üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${exportDir}`);
}

migrateStorage();
